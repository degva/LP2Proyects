MODELO
	ObjetoGrafico (interfaz)
		- Dibujar()

	Objeto:ObjetoGrafico
		- int posX (necesario?)
		- int posY (necesario?)
		- char elementoGrafico
		- Objeto()
		- Dibujar()

	// no todos los objetos tienen por que moverse
	Personaje : ObjetoGrafico (interfaz)
		- Mover()

	Pacman : Personaje
		- int posX (necesario?)
		- int posY (necesario?)
		- int puntosVida
		- Dibujar() Escribe en la pantalla el elementoGrafico
		- Mover() Cambia el posX y el posY

	Pared : Objeto
	Pasadizo : Objeto

	// almacena un objetoGrafico (que puede ser cualquier cosa de las
	// que estan arriba
	Celda
		- ObjetoGrafico objGrafico

	Mapa
		- Lista bi-dimensional de Celdas
			En C# es List<List<Celda>> tablero
		- int numFilas
		- int numColumnas
		- ObtenerObjeto(int posX, int posY) Devuelve el objeto almacenado
			en cierta celda
		- ActualizarObjeto(int posX, int posY, ObjetoGrafico obj)
			Cambia el cambia el objeto dentro de la celda por el especificado

CONTROLADOR
	GestorMapas
		- Lista de Mapas listaMapas
		- AgregarMapa()
		- ObtenerMapa(int idx)

	InterpreteComandos
		- ProcesarComando(Mapa)
			Muestra el menu (?)
			Toma el comando y luego hace un switch. Dependiendo de lo que
			hace. Si el comando es mover, llama a la funcion MoverPacman.
		- Mover(char direccion, Mapa)
			Dependiendo de la direccion, crea un difX y un difY.
			Luego, hace un for-loop anidado para buscar el Pacman.
			Si lo encuentra y adem√°s a donde va, el objeto dentro de la celda
			debe ser cualquier cosa MENOS una pared.
			Entonces, llama a la function Pacman.Mover(), y
			Mapa.ActualizarObjeto() para poner al pacman Dentro.
			Luego, la posicion anterior, se convierte en un pasadizo.

VISTA
	Renderizador
		- MostrarMapa(Mapa)
			Llamar a la funcion dibujar de cada objeto dentro del tablero.

	Juego
		- GestorMapas gestor
		- int indiceMapaActual
		- CrearMapas()
			Crea un nuevo mapa y lo agrega al gestor de mapas
		- Jugar()
			Crea un Renderizador y un InterpreteComandos.
			Hace un loop mientras que el juego/partida no haya acabado.
			Dentro del loop, llama a la funcion 
			gestor.MostrarMapa(gestor.ObtenerMapa(indiceMapaActual))
			llama al interprete.ProcesarComando().
