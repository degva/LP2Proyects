######## LO QUE PREGUNTARON
1. En base a la lectura Avoid Common Pitfalls when Programming 2D Graphics in 
Java.pdf, explique en que consiste el Double Buffering.
Rpta:
Es una tecnica para evitar el flickering. Consiste en crear otro buffer que
ayuda a que se impriman los objetos con major rapidez.

2. De acuerdo a la lectura Painting in AWT and Swing, ¿cuál es la diferencia
entre System-triggered Painting y App-triggered Painting ?
Rpta:
El system-triggered painting es cuando el sistema le pide a la aplicación que 
renderize sus contenidos.
El App-triggered painting es cuando el componente decide si es necesario 
actualizar sus contenidos por un cambio en su estado interno.

3. De acuerdo a la lectura de Painting in AWT and Swing. Explique en que 
consiste el método paint().
Rpta:
El método paint() sirve para dibujar la clase de la cual esta implementada. 
Sea como haya sido llamada, el AWT usa un callback para pintar. Este metodo 
debe ser overriden dentro de la clase. 


######## PRIMERA LECTURA
Avoid Common Pitfalls when Programming 2D Graphics in Java:
~ Things that degrade the graphics performance and how to go around this

	+ Java provices AWT and Swing (frameworks for designing graphical user
		interfaces. Yet they render too slowly.

	1.1 Basic Building Blocks
	There are 2 basic building blocks for graphics in a 2D game. The "drawing
	canvas" and te collection of "images". The images are drawn repetitively
	on the screen to produce animation.

	The canvas is Frame o JFrame.
	The images are stored in BufferedImages.

	2. The Canvas
	2.1 Configuracion
	To avoid flickering, set the "ignore repaint" property, using the 
	setIgnoreRepaint method.

	Con la clase GraphicsDevice, se puede obtener todas las posibles configuraciones
	para la tarjeta grafica.
	Cuando se crea un JFrame, se recomienda usar la configuracion actual.

	2.2 Tamano apropiado para una ventana
	Cuando se crea un a ventana con JFrame, de 640x480, el tamano de la superficie
	para dibujar es de aprox 630x480 ya que se cuenta el tamano del title bar.

	Para solucionar eso,se crea un objeto Canvas DENTRO del JFrame.

	2.3 Full Screen y cambiando la resolucion
	Con GraphicsDevice se puede cambiar esto.

	2.4 Double Buffering
	Para suavisar las animaciones. Esta es una tecnica para evitar flickering.
	Se activa usando el BufferStrategy class. Se puede usar n-buffering, pero con
	double es optimo.

	3 Buffered Images.
	Optimal method were found on Graphics Configuration obj. Using the
	createCompatimeImage(x,y,Transparency.BITMASK) method.

	3.1 Imagenes volatives e Imagenes administradas
	Volatile: almacenadas en la memoria de video. Es super fast. Pero se borra por
	otra aplicacion.
	Managede: dentor de video y convecional memoria. No sufre lo que el volatile.

	3.2 Color Mode
	Para que todo sea chevere, es necsario crear todas las imagnes con las mismas
	caracteristicas para la pantalla actual. Si se pasa a RGBA 32-bit, TODAS las 
	imagenes deben ser creadas, cargadas o convertidas a este modo.
	Si no se hace, las imagenes se convertiran cada vez que se dibujen en la
	pantalla. Causando tremendous slowdowns.

	3.3 Transparencias
	Tres tipos: Opaco, bitmask y alpha. Solo alpha es el que causa mas slowdown.
	Se recomienda evitar alpha.
	createCompatimeImage(x,y,Transparency.TRANSLUCENT)

	3.4 Rendering a la pantalla
	Primero se dibuja la imagen en la memoria
	graph2D.drawImage(bufferedImage,x,y,null);
	Luego se dibuja en la pntalla
	graph2D.dispose();
	bufferStrategy.show();
	graph2D = (Graphics2D) bufferStratgy.getDrawGraphics();


######## SEGUNDA LECTURA
Painting with AWT (Abstract Windowing Toolkit) y Swing. Ambos proveen un
framework que hace relativamente painless para un GUI para render lo bits correctos
en el momento correcto.

	# Pintando en AWT
	Para que pinte, se necesita saber que lo llama. Hay 2 triggers:
		- system-triggered painting
			El sistema pide a un componente a renderizar sus contenidos. Usualemnte 
			por una de estas razones:
			+ El component se hizo visible en la pantalla
			+ El componente es resized
			+ El componente tiene danos que necesitan ser reparados.

		- application-triggered painting.
			el componente decide si es necesairio actualizar sus contenidos por que su
			estado interno ha cambiado. Como cuando le haces click a un boton.

	# The Paint Method
	Sea como se halla llamado, el AWT usa un callback para pintar. El metodo 
	"callback" debe ser overridden. Este es 
		public void paint (Graphics g)
	
	Graphis es pre-configurado. Tiene: color parael foregrount, fount, translation
	y clip (el rectangulo del area.

	paint() vs update()
	Diferencias entre system v app-triggered. Es por que  AWT trata dferentemente 
	para los componenetes pesados (heavyweight).

		- System triggered
			1. El AWT determina si una parte o TODO el componente necesita ser repintado
			2. El AWT causa el evento que llama a paint()

		- App triggered
			1. El programa determinar si se pitan todo o una parte
			2. El programa llama a repaint().
			3. El AWT causa el envento que llama a repaint()
			4. Si el componento no orverride update(), se limpia la pantalla y se llama
			a paint().


  Luego vienen cosas un poco mas ~complejas~. y hablan del double buffering.
