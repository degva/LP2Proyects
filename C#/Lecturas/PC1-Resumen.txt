# LO QUE PREGUNTARON

1. ¿Qué ocurre durante una recolección de basura?
Rpta:
Tiene tres etapas:
	1. The marking phase: Busqueda y creacion de una lista de todos los objetos 
		vivos
	2. The relocating phase: actualiza las referencias a los objetos que serán 
		compactados. Así también mueve entre generaciones a los objetos 
		sobrevivientes
	3. The compacting phase: que reclama el espacio ocupado por los objetos 
		muertos y compacta a los sobrevivientes.

2. mencione y explique cada uno de los estados en los que podría estar la 
memoria virtual.
Rpta:
Los tres estados que puede estar la memoria virtual son:
	1. Free: No tiene referencias y esta disponible para ser usado (avialable 
		for allocation).
	2. Reserved: Está reservada para el uso del usuario y no puede ser usado 
		por ningún pedido de localización (allocation request).
	3. Commited: El bloque de memoria está asignado a almacenamiento físico 
		(physical storage).

3. para que una recolección de basura se produzca se debe cumplir al menos 
una de 3 condiciones. Mencione cuáles son esas 3 posibles condiciones.
Rpta:
Para que se produzca la recolección de basura, se debe cumplir:
	1. Sólo cuando el sistema ahora tiene poca memoria física.
	2. Cuando el límite aceptado de memoria es sobrepasado.
	3. Puede ser llamado "manualmente" por la aplicación creada.

#-------------------#
# Garbage Collector #
#-------------------#

- Benefits:
  1. Avois the programmer to worry about freeing memory.
  2. Allocates objects on the managed heap efficiently
  3. Reclaims objects that are no longer being used
  4. Memory safety by making sure that an object cannot use te content
    of another object.

+ Fundamentals of memory
  - Each process has its own virtual address space. Sharing a whole
    phisical memory with the rest of processes.
  - On 32-bit computers, each process has a 2GB user-mode virtual
    address space. This means, its memory address can point to any place
    in a 2GB system.
  - The virtual memory can have three states:
    1. Free: Has no references & available for allocation
    2. Reserved: It's for the user's use and cannot be used by any other
      allocation request.
    3. Commited: The block of memory is assigned to physical storage
  - Virtual address space can get fragmented. There can be wholes of
    free blocks in the address space. The VMM has to find a single free
    block that is large enough to satisfy the allocation request.

+ Conditions for a garbage collection
  - It will occur only when the system has low physical memory.
  - When the acceptable threshold is surpassed. This threshold is 
    constantly adjusted as the process runs.
  - Can be called with GC.Collect. But only would be necessary when
    testing.

+ The Managed Heap
  - All threads in the process allocate memory for objects on the same
    heap. The GC calls the VirtualAlloc function (in Win32) and reserves
    one segment of memory at a time for managed applications. When done,
		it calls the VirtualFree function to free memory.
  - ★ The less objects allocated on the heap, the better. The gargage
    collector wont do too much shit if there's not much shit. In other
    words, don't create a 32byte thing, when you need 15.
  - The GC also moves the live objects together.
  - The GC intrusiveness is proportional of how shit (big) your code is.

+ Generations
  - The heap is organized into generations: the short-living and 
    long-living ones.
	- Hay 3 generaciones: 0, 1 y 2.
	- la 0 es la que tiene objetos de vida corta (short lived). el GC se pasea
		aqui a cada rato.
	- la 1 tiene es la intermedia entre la 0 y la 2. Tiene short-lived objs
	- la 2 tiene objetos de vida larga (long-lived)
	- Colectar una generacion significa colectar objetos en esa generacion y 
		en sus menores.

+ Survival and promotions
	- Los que no son colectados, son "survivors" y son pasados a la siguiente
		generacion.
	- Cuando ve que hay muchos en una misma generacion. Aumenta el threshold
		of allocations para esa generacion.

+ Ephemeral generations and segments
	- Generacion 0 y 1 son tambien "efimeros"
	- estas generaciones se ponen en segmentos efimeros.
	- Cada nuevo segmento adquirido por el GC se vuelve un segmento efimero y
		contiene solo objetos que sobrevivieron a la generacion 0. El antiguo
		segmento efimero se vuelve el segmento de la generacion 2.
	- Tamano varia dependiendo si el sistema es 32 o 64 bits.

+ La carnecita de todo esto (que pasa durante la colecion de basura)
	1 (marking phase) Busqueda y creacion de una lista de todos los objetos vivos
	2 (relocating phase) actualiza las referencias a los objetos que seran 
		compactados.
	3 (compacting phase) que reclama el espacio ocupado por los objetos muertos y
		compacta a los sobrevivientes. 
	
	- Para determinar si esta vivo o no unsobjeto:
		1. Stack roots. Proveido por Just in time compiler y stack walker
		2. Garbage collection handles.
		3. Static data. Objetos staticos en un dominio que podria ser referencia
			a otros objetos. Cada aplicacion mantiene track de sus objetos estaticos.

	- Cuando inicia el GC, todos los threads son suspendidos, excepto el que llama
		a el GC.
	
+ Worstation & server GC
	- En una workstation es posible tener otros threads con el gc corriendo.
	- En un server, se puede ser no-concurrente.
	- Que sea concurrente permite que las aplicaciones sean mas responsive minimizando
	las pausas para la colleccion.

+ Configuracion
	- se usa el <gcServer>
