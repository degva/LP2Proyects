LO QUE PREGUNTARON:
1. En base a la lectura Learning the Java Language - Packages, explique 
mediante un ejemplo como podríamos evitar la ambigüedad de nombres.
Rtpa:
Digamos que la empresa que hace el paquete es example.com y crea un paquete 
llamado paqueteprueba, entonces el nombre del paquete se llamaria:
com.example.paqueteprueba.

Estaría dentro de una carpeta con el siguiente árbol:

com/example/paqueteprueba.

De esta forma se puede organizar los paquetes y evitar ambigüedades cuando
exista otro paquete con el mismo nombre.

2. En base a la lectura Programming with Assemblies, mencione y explique 2 factores por los que podría agrupar módulos y recursos de códigos en ensamblados.
Rpta:


3. En base a la lectura Programming with Assemblies, mencione los lugares donde puede implementar un ensamblado.

- En la misma carpeta donde está ubicada el código.
- En la cache global.
- A traves de HTTP.
OJO, Servidor http, directorios y/o subdirectorios de la aplicación (no necesariamente donde se ubica el 
código)


# ---------------------- #
# Learning Java Packages #
# ---------------------- #

Para que se crean los packs (de graficos por ejemplo?)?
1. para determinar facilmente que ciertos tipos estan relacionados.
2. para saber donde encontrar tipos que pueden proveer funciones relacionadas a los graficos.
3. Los nombres de los tipos no haran conflico con otros nombres en otros packs por que
el packete crea un nuevo namespace.

# Creando un pack
Arrica de cada class/inferfaz etc se pone:
->  package graphics;
    public interface Draggable {...}

# Nombrando al pack
Mirar pregunta 1

# Usnado miembros de un pack
Cualquier tipo que compromete al pack, son conocidos como miembros del pack.

  + Referring to a pack member by its qualifies name
    Say you imported the graphics package lke this:
    import graphics;
    ...
      graphics.Rectangle myRect = new graphics.Rectangle();
    ...
    you need to put the whole namespace an' shit.

    So, you can do this:
    import  graphics.Rectangle;
    ...
      Rectanble myRect = new Rectangle();
    ...
    more maintanable!.

    You can import al the members, by doing:
    import graphics.*;

  + Ambiguities
    Say you have two packages with a member with the same name. So then you have to use the
    fully qualified name to indicate which member you are referring to.

  + Static Import statement
    If you have constants on your package, you can use the static to make it actual constants
    under your program.

# managing Source and Class Files
Mirar pregunta 1



# --------------------------- #
# Programming with Assemblies #
# --------------------------- #

Assemblies son los building blocks del Framework .NET, son las unidades fundamentales de
deployment, version control, reuse, activation scoping y security permissions.

# Creando Assemblies
  - El assembly mas siemple es un archivo con un nombre simple dentro de un dominio
  - Este no puede ser referenciado por otros assemblies fuera del directorio de la app.
  - Para desinstalar la aplicacion hecha del assembly, simplemente hay que eliminar el
    directorio donde reside

# Nombres de los Assemblies
  - Se guarda en metadata.
  - tiene cierto impacto en el scope del assembly y en el uso por una aplication
  - Runtime usa esta informacion para localizarlo y differenciarlo de otros assemblies con
    el mismo nombre
# How to: determinar el fully qualified name
  - Se puede usar el Global Assembly Cache Tool. Si no hay esto, hay otras formas.
  - Se puede imprimir via consola o a traves de una variables (usando 
    AssemblyName.GetAssemblyName(@'.\file.dll'))
  - O se puede usar el IL Dissablembler para ver la metadata.

# Assembly location
Mirar pregunta 2

# How to: build a single-file assembly
  En la linea de comandos:
  csc myCode.cs
  Esto da un myCode.exe

  Para especificar nombre
  csc /out:myAssembly.exe myCode.cs

  Creando una libreria
    Una libreria tiene tipos que pueden ser referenciados en otros assemblies, pero no tiene codigo
    de inicio de ejecucion.

    csc /out:myCodeLibrary.dll /t:library myCode.cs

# Creando multilples assembly
  al <module name in .netmodule> <module name> ... /main:<method name> /out:<file name> /target:exe

  El /out: puede ser myAssembly.exe

  el .netmodule se crea con 

  csc /t:module Program.cs

